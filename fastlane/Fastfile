# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  COVERAGE_FILE_PATH = "code_coverage/index.html"
  code_coverage_value = nil
  last_commit_hash = nil
  OWNER = "monsterpit" #change it your gitub username
  OWNER_GITHUB_TOKEN_P1 = "ghp_8G76dA4wK0ohf3144KP5fp"
  OWNER_GITHUB_TOKEN_P2 = "SV6wKiti1b0pcN"
  REPO_NAME = "CurrencyConverter" 
  
  
  lane :custom_lane_danger do |options|
    token = options[:token]
    danger(  
     # danger_id: "unit-tests",
      dangerfile: "Dangerfile",
      github_api_token: token,
      remove_previous_comments: true,
      new_comment: true,
     # pr: "https://github.com/monsterpit/CurrencyConverter/pull/1",
      verbose: true
    )
  end

  desc "Description of what the lane does"
  lane :custom_lane do |options|
    clear_derived_data
    scan
    slather(
      scheme: "CurrencyConverter",
      proj: "CurrencyConverter.xcodeproj",
      source_directory: "",
      output_directory: "fastlane/code_coverage",
     # html: true,
      cobertura_xml: true,
      ignore: ["CurrencyConverter/Sources/Modules/View/*","CurrencyConverter/Sources/Managers/*"]
    )

    # UI.message "obtaining coverage number"
    # code_coverage
    # UI.message "Code Coverage: #{code_coverage_value}"
    # UI.message "getting commit sha"
    # UI.message "commit has #{get_last_commit_hash}"
    # UI.message "publishing to github"
    # post_message_on_github(message: "Code Coverage #{code_coverage_value}")
    executeDanger(options)
  end

  lane :executeDanger do |options|
    token = options[:token]
    danger(  
    #  danger_id: "unit-tests",
      dangerfile: "Dangerfile",
      github_api_token: token,
    #  pr: "https://github.com/monsterpit/CurrencyConverter/pull/1",
      verbose: true
    )
  end

  lane :executeDangerWithPR do |options|
    token = options[:token]
    danger(  
      danger_id: "unit-tests",
      dangerfile: "Dangerfile",
      github_api_token: token,
      pr: "https://github.com/monsterpit/CurrencyConverter/pull/#{options[:pr]}",
      verbose: true
    )
  end

  # lane :custom_lane_wow do 
  #   slather(
  #     # scheme: "CurrencyConverter",
  #     proj: "CurrencyConverter.xcodeproj",
  #     source_directory: "dsf",
  #     output_directory: "fastlane/code_coverage",
  #      html: true,
  #     # cobertura_xml: true,
  #     ignore: ["CurrencyConverter/Sources/Modules/View/*","CurrencyConverter/Sources/Managers/*","CurrencyConverter/Sources/Utils/*"]
  #   )
  #   xcov(
  #     is_swift_package: true,
  #     project: "CurrencyConverter.xcodeproj",
  #     scheme: "CurrencyConverter",
  #     output_directory: "fastlane/xcov_output"
  #   )
  # end

  lane :custom_lane_wow do 
    scan
    xcov(
      json_report: true,
      is_swift_package: true,
      output_directory: "fastlane/xcov_output"
    )
  end

  lane :get_last_commit_hash do
    # Execute git command to get the last commit hash
    last_commit_hash = sh("git rev-parse HEAD").strip
    # Output the last commit hash
    puts "Last commit hash: #{last_commit_hash}"
    # Return the last commit hash if needed
    last_commit_hash
    
  end

  lane :custom_lane2 do
    scan
  end

  lane :custom_lane3 do
    slather(
    configuration: ".slather.yml"
  )
  end

  lane :custom_lane4 do
   scan
   xcov(
    json_report: true,
    is_swift_package: true,
    output_directory: "fastlane/xcov_output"
   )
  end

  lane :custom_lane5 do
    danger(
  # danger_id: "unit-tests",
  dangerfile: "Dangerfile",
  github_api_token: "",
  verbose: true
)
  end

  lane :code_coverage do
    current_dir = Dir.pwd
    complete_coverage_file_path = "#{current_dir}/#{COVERAGE_FILE_PATH}"
    UI.message "Coverage file path: #{complete_coverage_file_path}"

    first_term = "id=\"total_coverage\">"
    second_term = "</span>"
    
    begin
      # Open the file in read mode
      File.open(complete_coverage_file_path, "r") do |file|
        # Read the contents of the file
        file_data = file.read
        first_string = file_data.split(first_term, -1)[1]
        final_string = first_string.split(second_term, -1)[0]
        # Output the contents
        code_coverage_value = final_string
      end
    rescue Errno::ENOENT
      # Handling for "No such file or directory" error
      puts "File not found."
    end
  end

  lane :post_message_on_github do |options|
    # Extract required parameters
    message = options[:message]
  
    # Define your GitHub credentials
    github_token = "#{OWNER_GITHUB_TOKEN_P1}#{OWNER_GITHUB_TOKEN_P2}"
  
    # Construct the URL to post a comment on the pull request
    url = "https://api.github.com/repos/#{OWNER}/#{REPO_NAME}/statuses/#{last_commit_hash}"
  
    # Define the payload for the comment
    payload =  "{\"state\": \"success\",\"description\":\"#{message}\",\"context\":\"coverage\"}"
  
    begin
      # Post the comment using the github_api action

      response = github_api(
        url: url,
        http_method: "POST",
        api_token: github_token,
        body: payload
        )

       # Check the status code in the response
       if response['status'] == 201
        # Handle success
        puts "Message posted successfully on GitHub."
       else
        # Handle failure
        puts "Failed to post message on GitHub. Status code: #{response['status']}"
      end
      rescue => e
        # Handle exceptions
      puts "An error occurred: #{e.message}"
    end
  end

end